#ifndef _HANDLER
#define _HANDLER 1

/**
 *  handler_msg - обрабатывает новые сообщения
 *
 *  args:   Аргументы, передаваемые в функцию потока. Предполагается, что будет
 *          передана структура threadHandlersArgs_msg.
 *
 *  Эта функция ожидает разблокировки семафора 3(соответствие properties.h),
 *  после чего перерисовывает экран данными из сегмента разделяемой памяти
 *  соответствующего сообщениям, и снова блокируется.
 *  Предполагается использование в отдельном потоке, так как большую часть
 *  времени поток блокируется.
*/
void *handler_msg(void *args);

/**
 *  handler_names - обрабатывает новые подключения
 *
 *  args:   Аргументы, передаваемые в функцию потока. Предполагается, что будет
 *          передана структура threadHandlersArgs_name.
 *
 *  Эта функция ожидает разблокировки семафора 2(соответствие properties.h),
 *  после чего перерисовывает экран данными из сегмента разделяемой памяти
 *  соответствующего именам пользователей, и снова блокируется.
 *  Предполагается использование в отдельном потоке, так как большую часть
 *  времени поток блокируется.
*/
void *handler_names(void *args);

/**
 *  handler_input - обрабатывает действия пользователя
 *
 *  args:   Аргументы, передаваемые в функцию потока. Предполагается, что будет
 *          передана структура threadHandlersArgs_input.
 *
 *  Эта функция ожидает от пользователя ввод с клавиатуры. По нажатию [F3]
 *  сотрёт имя пользователя из разделяемой памяти, разблокирует
 *  семафоры 2(соответствие properties.h) для перерисовки списка на всех
 *  клиентах и завершит программу. По нажатию обычных клавиш будет заполнять
 *  поле ввода сообщения inputw, по нажатию [ENTER] запишет сообщение в
 *  соответствующий сегмент разделяемой памяти, разблокирует
 *  семафоры 3(соответствие properties.h) для перерисовки списка сообщений на
 *  всех клиентах, и очистит поле ввода.
 *  Предполагается использование в отдельном потоке, так как большую часть
 *  времени поток блокируется.
*/
void *handler_input(void *args);

#endif
